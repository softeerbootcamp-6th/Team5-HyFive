name: Frontend CD

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [dev-fe]

permissions:
  id-token: write
  contents: read

jobs:
  build:
    name: Build Frontend
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        node-version: [20]

    defaults:
      run:
        working-directory: frontend

    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "pnpm"
          cache-dependency-path: frontend/pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install

      - name: Get pnpm store path
        id: pnpm-cache-path
        run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache-path.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('frontend/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Create production env
        run: echo "VITE_KAKAOMAP_API_KEY=${{ secrets.KAKAOMAP_API_KEY }}" > .env.production

      - name: Build Project
        run: pnpm build

      - name: Upload production artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: frontend/dist

  deploy:
    name: Deploy Frontend
    runs-on: ubuntu-22.04
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Download dist
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: ./dist

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.ROLE_ARN }}
          aws-region: ap-northeast-2

      - name: Remove old S3 files(js, css)
        run: |
          aws s3 rm s3://${{ secrets.BUCKET_NAME }}/frontend/assets/ --recursive \
            --exclude "*" --include "*.js" --include "*.css"

      - name: Upload new files to S3
        run: |
          aws s3 cp ./dist s3://${{ secrets.BUCKET_NAME }}/frontend --recursive

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/index.html"
